{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-15T01:02:05.193Z",
    "end": "2025-01-15T01:02:05.472Z",
    "duration": 279,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "df7d71f8-da69-4395-879a-e3fa813638af",
      "title": "",
      "fullFile": "cypress/e2e/exercicio-api.cy.js",
      "file": "cypress/e2e/exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "296bd75b-5c7a-492f-b67a-39507a9d726a",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 85,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "e455f9e8-0851-4e4d-ab0e-fcd1147f6fdb",
              "parentUUID": "296bd75b-5c7a-492f-b67a-39507a9d726a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "04ea0d53-5803-4d5c-8778-d7ca2a1e27f0",
              "parentUUID": "296bd75b-5c7a-492f-b67a-39507a9d726a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let emailFaker = faker.internet.email();\nlet nomeUsuario = faker.person.fullName();\ncy.criarUsuario(nomeUsuario, emailFaker, 'teste@123', 'true').then(response => {\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n  expect(response.status).to.equal(201);\n});",
              "err": {},
              "uuid": "2f5fccf3-0d01-499a-8227-fc63e38d9954",
              "parentUUID": "296bd75b-5c7a-492f-b67a-39507a9d726a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.criarUsuario('Usuário EBAC Novo', 'usuarionovo789@ebac.com', 'teste', 'true').then(response => {\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n  expect(response.status).to.equal(400);\n});",
              "err": {},
              "uuid": "65547eef-8888-4043-8503-72f4bcd17adf",
              "parentUUID": "296bd75b-5c7a-492f-b67a-39507a9d726a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let emailFaker = faker.internet.email();\nlet nomeUsuario = faker.person.fullName();\ncy.criarUsuario(nomeUsuario, emailFaker, 'teste@123', 'true').then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": nomeUsuario,\n      \"email\": emailFaker,\n      \"password\": \"teste@123\",\n      \"administrador\": \"true\"\n    }\n  });\n}).then(response => {\n  expect(response.body.message).to.equal('Registro alterado com sucesso');\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "455c1572-69fa-4cd5-854e-0b338d945aeb",
              "parentUUID": "296bd75b-5c7a-492f-b67a-39507a9d726a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let emailFaker = faker.internet.email();\nlet nomeUsuario = faker.person.fullName();\ncy.criarUsuario(nomeUsuario, emailFaker, 'teste@123', 'true').then(response => {\n  let id = response.body._id;\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "d633bd61-a4c7-41c4-a69f-de91f7b2a12a",
              "parentUUID": "296bd75b-5c7a-492f-b67a-39507a9d726a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e455f9e8-0851-4e4d-ab0e-fcd1147f6fdb",
            "04ea0d53-5803-4d5c-8778-d7ca2a1e27f0",
            "2f5fccf3-0d01-499a-8227-fc63e38d9954",
            "65547eef-8888-4043-8503-72f4bcd17adf",
            "455c1572-69fa-4cd5-854e-0b338d945aeb",
            "d633bd61-a4c7-41c4-a69f-de91f7b2a12a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "index.html",
        "overwrite": true,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}